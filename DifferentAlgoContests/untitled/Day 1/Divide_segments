#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <set>

#define endl "\n"

using namespace std;

typedef long long ll;

int n;
vector<int> st;
vector<pair<int, int>> v;

int best(int a, int b) {
    if (a == -1) {
        return b;
    }
    if (b == -1) {
        return a;
    }
    if (v[a].second - v[a].first <= v[b].second - v[b].first) {
        return a;
    }
    return b;
}

void build(int l = 0, int r = n, int cv = 1) {
    if (l + 1 == r) {
        st[cv] = l;
    }
    else {
        int mid = (l + r) / 2;
        build(l, mid, cv * 2);
        build(mid, r, cv * 2 + 1);
        st[cv] = best(st[cv * 2], st[cv * 2 + 1]);
    }
}

int get(int ll, int rr, int l = 0, int r = n, int cv = 1) {
    if (ll >= rr) {
        return -1;
    }
    if (ll == l && rr == r) {
        return st[cv];
    }
    int mid = (l + r) / 2;
    int res1 = get(ll, min(rr, mid), l, mid, cv * 2);
    int res2 = get(max(ll, mid), rr, mid, r, cv * 2 + 1);
    return best(res1, res2);
}

struct segment {
    int l, r;
    int indl, indr;
    int ans;
    int ans_ind;
    segment(){}
    segment(int l, int r, int indl, int indr) : l(l), r(r), indl(indl), indr(indr) {
        ans = r - l;
        ans_ind = indr;
        ans = min(ans, min(v[indr].second, r) - max(v[indr].first, l));

        int ind_least = get(indl, indr + 1);
        if (ans >= min(v[ind_least].second, r) - max(v[ind_least].first, l)) {
            ans = min(v[ind_least].second, r) - max(v[ind_least].first, l);
            ans_ind = ind_least;
        }

        if (ans >= min(v[indl].second, r) - max(v[indl].first, l)) {
            ans = min(v[indl].second, r) - max(v[indl].first, l);
            ans_ind = indl;
        }
    }
};

bool operator<(segment a, segment b) {
    if (a.ans == b.ans) {
        return a.l < b.l;
    }
    return a.ans < b.ans;
}

set<segment> s;
vector<int> ans;

void divide() {
    auto cs = *s.begin();
    s.erase(s.begin());
    ans.push_back(cs.ans_ind + 1);
    if (cs.indl < cs.ans_ind) {
        s.insert({cs.l, v[cs.ans_ind].first, cs.indl, cs.ans_ind - 1});
    }
    if (cs.ans_ind < cs.indr) {
        s.insert({v[cs.ans_ind].second, cs.r, cs.ans_ind + 1, cs.indr});
    }
}

int main() {
    int maxr;
    cin >> maxr >> n;
    st.resize(4 * n);
    v.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> v[i].first >> v[i].second;
    }
    build();
    s.insert({1, maxr, 0, n - 1});
    for (int i = 0; i < n; ++i) {
        divide();
    }
    for (int i : ans) {
        cout << i << endl;
    }
}