#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>
#include <complex>

using namespace std;

typedef long long ll;
typedef complex<long double> base;

const long double PI = 3.1415926535;

vector<base> omegas;

void fft(vector<base> &a, int ind, int n) {
    if (n == 1) {
        return;
    }
    else {
        vector<base> b1(n / 2), b2(n / 2);
        for (int i = 0; i < n; i += 2) {
            b1[i / 2] = a[i];
            b2[i / 2] = a[i + 1];
        }
        fft(b1, ind * 2, n / 2);
        fft(b2, ind * 2, n / 2);

        for (int k = 0; k < n / 2; ++k) {
            a[k] = b1[k] + omegas[k * ind] * b2[k];
            a[k + n / 2] = b1[k] - omegas[k * ind] * b2[k];
        }
        return;
    }
}

vector<int> multiply(vector<int> &a, vector<int> &b) {
    int n = 1;
    while (n < max(a.size(), b.size()) * 2) {
        n <<= 1;
    }
    omegas.resize(n + 1);
    omegas[0] = base(1);
    omegas[1] = base(cos(2 * PI / n), sin(2 * PI / n));
    for (int i = 2; i < n + 1; ++i) {
        omegas[i] = omegas[i - 1] * omegas[1];
    }

    vector<base> fa(a.begin(), a.end()), fb(b.begin(), b.end());
    fa.resize(n, 0);
    fb.resize(n, 0);

    fft(fa, 1, n);
    fft(fb, 1, n);
    for (int i = 0; i < n; ++i) {
        fa[i] *= fb[i];
    }
    fft(fa, 1, n);
    reverse(fa.begin() + 1, fa.end());

    vector<int> res(n);
    for (int i = 0; i < n; ++i) {
        fa[i] /= base(n);
        res[i] = int(fa[i].real() + 0.5);
    }
    return res;
}

int main() {
    string sa, sb;
    cin >> sa >> sb;
    vector<int> a, b;
    bool inv = false;
    for (int i = 0; i < sa.size(); ++i) {
        if (sa[i] == '-') {
            inv = !inv;
            continue;
        }
        a.push_back(sa[i] - '0');
    }
    for (int i = 0; i < sb.size(); ++i) {
        if (sb[i] == '-') {
            inv = !inv;
            continue;
        }
        b.push_back(sb[i] - '0');
    }
    reverse(a.begin(), a.end());
    reverse(b.begin(), b.end());
    auto res = multiply(a, b);
    for (int i = 0; i < res.size() - 1; ++i) {
        res[i + 1] += res[i] / 10;
        res[i] %= 10;
    }
    vector<int> ans;
    bool flag = false;
    for (int i = res.size() - 1; i >= 0; --i) {
        if (flag) {
            ans.push_back(res[i]);
        }
        else {
            if (res[i]) {
                flag = true;
                ans.push_back(res[i]);
            }
        }
    }
    if (ans.empty()) {
        cout << 0 << endl;
        return 0;
    }
    if (inv) {
        cout << '-';
    }
    for (auto i : ans) {
        cout << i;
    }
    cout << endl;
}