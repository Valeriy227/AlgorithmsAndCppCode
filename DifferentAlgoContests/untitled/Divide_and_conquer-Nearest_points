//ПОСЛЕ ЗАВЕРШЕНИЯ ИТЕРАЦИИ РЕКУРСИИ ВСЕ ИНДЕКСЫ НАФИГ ШАФЛЯТСЯ

#include <iostream>
#include <vector>
#include <algorithm>
#include <map>
#include <queue>

using namespace std;

typedef long long ll;

vector<pair<ll, ll>> v;
pair<ll, ll> ans1, ans2;
ll ans_dist;

ll dist(int ind1, int ind2) {
    ll x = v[ind1].first - v[ind2].first;
    ll y = v[ind1].second - v[ind2].second;
    return x * x + y * y;
}

ll dist(int ind1, pair<ll, ll> b) {
    ll x = v[ind1].first - b.first;
    ll y = v[ind1].second - b.second;
    return x * x + y * y;
}

void check(int ind1, int ind2) {
    if (ans_dist > dist(ind1, ind2)) {
        ans1 = v[ind1];
        ans2 = v[ind2];
        ans_dist = dist(ind1, ind2);
    }
}

bool cmp(pair<ll, ll> a, pair<ll, ll> b) {
    if (a.second == b.second) {
        return a.first < b.first;
    }
    return a.second < b.second;
}

void divide_and_conquer(int l, int r) {
    if (l + 1 == r) {
        return;
    }
    int mid = (l + r) / 2;
    ll midx = v[mid].first;
    divide_and_conquer(l, mid);
    divide_and_conquer(mid, r);
    vector<pair<ll, ll>> vmerge(r - l);
    merge(v.begin() + l, v.begin() + mid,
          v.begin() + mid, v.begin() + r,
          vmerge.begin(), cmp);
    for (int i = l; i < r; ++i) {
        v[i] = vmerge[i - l];
    }
    vector<int> vmid;
    for (int i = l; i < r; ++i) {
        if (dist(i, {midx, v[i].second}) < ans_dist) {
            vmid.push_back(i);
        }
    }
    for (int i = 0; i < vmid.size(); ++i) {
        for (int j = max(0, i - 8); j < i; ++j) {
            check(vmid[i], vmid[j]);
        }
    }
}

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int n;
    cin >> n;
    v.resize(n);
    for (int i = 0; i < n; ++i) {
        cin >> v[i].first >> v[i].second;
    }
    sort(v.begin(), v.end());
    ans_dist = 9e18;
    divide_and_conquer(0, n);
    cout << ans1.first << " " << ans1.second << endl;
    cout << ans2.first << " " << ans2.second << endl;
}